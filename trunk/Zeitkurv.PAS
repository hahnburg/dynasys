(* Dynasys, http://code.google.com/p/dynasys/
 * Copyright (C) 2009  Dynasys
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http:www.gnu.org/licenses/>.
 *)

unit Zeitkurv;

interface

uses
  SysUtils, WinTypes, WinProcs, Messages, Classes, Graphics, Controls,
  Forms, Dialogs,
  ZeitSele, Liste;

type
  TZeitKurveForm = class(TForm)
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
  private
    ZeitDlg:TZeitKurveDlg;
    InputList:TStringList;
    Schritt,x : integer;
  public
    procedure InitWerte(Schritte:integer);
    procedure HoleWerte(Zeit:double);
    procedure ExitWerte(Minimum,Maximum:double);
  end;

var
  ZeitKurveForm: TZeitKurveForm;

implementation

{$R *.DFM}

procedure TZeitKurveForm.HoleWerte(Zeit:Double);
var i,j : integer;
    Eintrag   : String[40];
begin
  inc(Schritt);
  if schritt mod 5=0 then inc(x) else exit;
  for j:=0 to InputList.count-1 do
    begin
      Eintrag:=InputList.strings[j];
      for i:=1 to ObjektListe.count-1 do
         with ObjektListe.items[i] do
           if Eintrag=name then   begin
         End;
    end;
end;

Procedure TZeitKurveForm.ExitWerte(Minimum,Maximum:double);
Begin
End;

procedure TZeitKurveForm.InitWerte(Schritte:integer);
begin
  Schritt:=-1;x:=-1;
end;


procedure TZeitKurveForm.FormCreate(Sender: TObject);
var i:integer;
begin
  InputList:=TStringList.Create;
  try
    ZeitDlg:=TZeitKurveDlg.Create(self);
    if ZeitDlg.ShowModal = idCancel Then
      begin
        self.close; exit
      end
    else
      for i:=0 to ZeitDlg.DstList.items.count-1 do
        InputList.add(ZeitDlg.DstList.items[i]);
  except
    MessageDlg('Fehler beim Öffnen des Dialogs!',mtError,[mbok],0);
  end;
end;

procedure TZeitKurveForm.FormDestroy(Sender: TObject);
begin
  ZeitDlg.free;
end;

procedure TZeitKurveForm.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
  Action := caFree;
end;

end.
